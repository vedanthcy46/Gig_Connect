version: '3.8'

services:
  # PostgreSQL Database with PostGIS
  postgres:
    image: postgis/postgis:15-3.3
    container_name: gigconnect-postgres
    environment:
      POSTGRES_DB: gigconnect
      POSTGRES_USER: gigconnect_user
      POSTGRES_PASSWORD: gigconnect_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    networks:
      - gigconnect-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: gigconnect-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - gigconnect-network

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: gigconnect-backend
    environment:
      NODE_ENV: development
      PORT: 5000
      DATABASE_URL: postgresql://gigconnect_user:gigconnect_password@postgres:5432/gigconnect
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      GOOGLE_MAPS_API_KEY: your-google-maps-api-key
      RAZORPAY_KEY_ID: your-razorpay-key-id
      RAZORPAY_KEY_SECRET: your-razorpay-key-secret
      CLOUDINARY_CLOUD_NAME: your-cloudinary-cloud-name
      CLOUDINARY_API_KEY: your-cloudinary-api-key
      CLOUDINARY_API_SECRET: your-cloudinary-api-secret
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - gigconnect-network
    command: npm run dev

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: gigconnect-frontend
    environment:
      REACT_APP_API_URL: http://localhost:5000/api
      REACT_APP_SOCKET_URL: http://localhost:5000
      REACT_APP_GOOGLE_MAPS_API_KEY: your-google-maps-api-key
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - gigconnect-network
    command: npm start

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: gigconnect-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - gigconnect-network
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  gigconnect-network:
    driver: bridge